#!/bin/bash

set -e

[ -z "$IMAGE" ] && echo "[ERROR] Need to set IMAGE environment variable." && exit 1
[ -z "$BUILDKITE_COMMIT" ] && echo "[ERROR] Need to set BUILDKITE_COMMIT environment variable." && exit 1

TAG="$BUILDKITE_COMMIT"
echo "Building: $IMAGE:$TAG"

# Make sure parent baseimage is available locally and up to date.
gcloud auth configure-docker
docker pull "$(grep '^FROM' Dockerfile | grep -o ' .*' | tr -d ' ')"

# Build assets in the container, then copy them into dist/.
# We have to do this with "docker cp" and not a mounted volume due to CI constraints.
docker build --build-arg version="$BUILDKITE_COMMIT" -t "$IMAGE":"$TAG" .

# Run container temporarily, then cleanup on exit or error.
CONTAINER_ID=$(docker run -d -i "$IMAGE":"$TAG")
function cleanup() {
  docker stop "$CONTAINER_ID"
  echo 'Done.'
}
trap cleanup EXIT

docker cp "$CONTAINER_ID":/app/src/dist/ dist/

# Upload new assets to GCS.
gsutil -m -h "Cache-Control: public,max-age=2678400" cp \
  -a public-read \
  -z "html,js,css,svg,txt,ico,xml" \
  -r \
  -n dist/assets dist/images dist/fonts \
  gs://percy-public-static/static/

docker push "$IMAGE":"$TAG"

echo "Deployed $IMAGE:$TAG"

echo 'Publishing sourcemaps to Sentry...'

# This publish script is run inside of Alpine linux so sentry-cli does not work since there are
# there are missing system dependencies. Use the sentry-cli docker image instead.
docker pull getsentry/sentry-cli
docker run \
  --rm \
  -v "$(pwd)/dist/assets:/mnt/data" \
  -e SENTRY_AUTH_TOKEN \
  --entrypoint /bin/sh \
  -it getsentry/sentry-cli \
  -c "
    sentry-cli releases \
      -o $SENTRY_ORG new \
      -p $SENTRY_PROJECT \
      $BUILDKITE_COMMIT;
    sentry-cli releases \
      -o $SENTRY_ORG \
      -p $SENTRY_PROJECT \
      files $BUILDKITE_COMMIT upload-sourcemaps \
        --url-prefix '~/static/assets' \
        --validate \
        /mnt/data
  "
